# -*- coding: utf-8 -*-
"""covid19

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1a4SLotOG3eBlMVjayHku1fRxuTuqk3Gv
"""
#use zip file in dataset
!unzip keras-covid-19.zip

import tensorflow as tf
from tensorflow import keras
from keras.preprocessing.image import ImageDataGenerator

from tensorflow import set_random_seed
set_random_seed(2)

train_datagen = ImageDataGenerator(
        rescale=1./255,
        width_shift_range = 0.1,
        height_shift_range=0.1,
        shear_range=0.2,
        zoom_range=0.2,
        validation_split = 0.2,
        horizontal_flip=True
        )
train_generator = train_datagen.flow_from_directory(
        'dataset',
        target_size=(300,300),
        batch_size=5,
        class_mode = 'binary',
        subset='training'
        )
validation_generator = train_datagen.flow_from_directory(
        'dataset',
        target_size=(300,300),
        batch_size=5,
        class_mode = 'binary',
        subset='validation'
        )

model = tf.keras.models.Sequential([
                                    tf.keras.layers.Conv2D(16, (3,3),activation = 'relu', input_shape = (300,300,3), padding='valid'),
                                    tf.keras.layers.MaxPooling2D(2,2),
                                    tf.keras.layers.Conv2D(32, (3,3),activation = 'relu',padding='valid'),
                                    tf.keras.layers.MaxPooling2D(2,2),
                                    tf.keras.layers.Conv2D(64, (3,3),activation = 'relu',padding='valid'),
                                    tf.keras.layers.MaxPooling2D(2,2),
                                    tf.keras.layers.Flatten(),
                                    tf.keras.layers.Dense(512, activation = 'relu'),
                                    tf.keras.layers.Dense(256, activation = 'relu'),
                                    tf.keras.layers.Dense(128, activation = 'relu'),
                                    tf.keras.layers.Dense(64, activation = 'relu'),
                                    tf.keras.layers.Dense(1, activation = 'sigmoid')

                                 
])

from tensorflow.keras.optimizers import RMSprop

model.compile(
    loss = 'binary_crossentropy',
    optimizer = RMSprop(lr = 0.001),
    metrics = ['acc']
)

model.fit_generator(
    train_generator,
    steps_per_epoch = 20,
    epochs = 10,
    validation_data = validation_generator,
    validation_steps = 20
)
